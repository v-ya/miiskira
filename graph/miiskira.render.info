:tag = "miiskira.render"

# 添加数据布局 vertex uniform
["layout" layout]
	# 新添加的布局名称 (name: 布局引用唯一标识符)
	[layout "name"]
		# tag 可选的取值
		#     "float"  "vec2"  "vec3"  "vec4"
		#     "double" "dvec2" "dvec3" "dvec4"
		#     "int"    "ivec2" "ivec3" "ivec4"
		#     "uint"   "uvec2" "uvec3" "uvec4"
		#              "mat2"  "mat3"  "mat4"
		#              "dmat2" "dmat3" "dmat4"
		# 下方该实例布局为
		# struct {
		#     float pos[3];
		#     float tex[2];
		#     struct {
		#         uint32_t index[1];
		#         float size[3];
		#     } attr;
		# }
		"pos" @"vec3" => (f32[3]) {}
		"tex" @"vec2" => (f32[2]) {}
		"attr" "index" @"uint" => (u32[1]) {}
		"attr" "size" @"float" => (f32[3]) {}
		# ...
		# 可引用子域 "pos" "tex" "attr" "attr.index" "attr.size"
		# 如有多个布局子域同名，将在针对修改 uniform 该子域时同时修改
	# ...

# 添加色彩混合预设
["blend" blend]
	[blend "name" blend-define]
		"logic" @string => "" # (可选) 逻辑操作，可选取值见下方，如果设置该项，attachment 将被忽略
		# logic:
		#     "0"  = 0
		#     "&"  = s & d
		#     "&~" = s & ~d
		#     "s"  = s
		#     "~&" = ~s & d
		#     "d"  = d
		#     "^"  = s ^ d
		#     "|"  = s | d
		#     "!|" = ~(s | d)
		#     "!^" = ~(s ^ d)
		#     "~d" = ~d
		#     "|~" = s | ~d
		#     "~s" = ~s
		#     "~|" = ~s | d
		#     "!&" = ~(s & d)
		#     "1"  = 1
		"color" @f32 => (f32[4]) { 0, 0, 0, 0 } # (可选) 常量色彩分量(constant) { r, g, b, a }
		[blend-define "attachment" blend-define-attachment]  # (可选)
			[blend-define-attachment "-"]                # (可选) 名字不重要，啥都行
				"mask" @u8 => (u8[4]) { 1, 1, 1, 1 } # (可选) 色彩分量掩码 { r, g, b, a }
				"src-color" @string => ""            # (必选) value => factor
				"dst-color" @string => ""            # (必选) value => factor
				"op-color" @string => ""             # (必选) value => op
				"src-alpha" @string => ""            # (必选) value => factor
				"dst-alpha" @string => ""            # (必选) value => factor
				"op-alpha" @string => ""             # (必选) value => op
				# factor:
				#     "0"    = (zero)
				#     "1"    = (one)
				#     "sc"   = (src color)
				#     "1-sc" = 1 - (src color)
				#     "dc"   = (dst color)
				#     "1-dc" = 1 - (dst color)
				#     "sa"   = (src alpha)
				#     "1-sa" = 1 - (src alpha)
				#     "da"   = (dst alpha)
				#     "1-da" = 1 - (dst alpha)
				#     "cc"   = (constant color)
				#     "1-cc" = 1 - (constant color)
				#     "ca"   = (constant alpha)
				#     "1-ca" = 1 - (constant alpha)
				# op:
				#     "+"    = (src) * (src-factor) + (dst) * (dst-factor)
				#     "-"    = (src) * (src-factor) - (dst) * (dst-factor)
				#     "-+"   = - (src) * (src-factor) + (dst) * (dst-factor)
				#     "min"  = min((src), (dst))
				#     "max"  = max((src), (dst))
			# ...

# 添加渲染流程
["render" render]
	[render "name" render-define]
		[render-define "attachment" render-attachment]
			# 定义渲染附件
			[render-attachment "a-name"] # 附件名称，用来下方引用
				"format" @string => ""        # (必选) 格式，可选取值见 format
				"sample" @string => ""        # (必选) 采样方式，可选取值见 sample
				"load" @string => ""          # (必选) 加载方式，可选取值见 load
				"store" @string => ""         # (必选) 储存方式，可选取值见 store
				"stencil_load" @string => ""  # (可选) 加载方式，可选取值见 load
				"stencil_store" @string => "" # (可选) 储存方式，可选取值见 store
				"initial" @string => ""       # (必选) 起始布局，可选取值见 layout
				"finally" @string => ""       # (必选) 结束布局，可选取值见 layout
				# format:
				#     "bgra"
				# sample:
				#     "1"
				#     "2"
				#     "4"
				#     "8"
				#     "16"
				#     "32"
				#     "64"
				# load:
				#     "load"
				#     "clear"
				#     "none"
				# store:
				#     "store"
				#     "none"
				# layout:
				#     "undefined"
				#     "general"
				#     "color_attachment_optimal"
				#     "depth_stencil_attachment_optimal"
				#     "depth_stencil_read_only_optimal"
				#     "transfer_src_optimal"
				#     "transfer_dst_optimal"
				#     "preinitialized"
				#     "khr_present_src"
			# ...
		[render-define "subpass" render-subpass]
			# 定义渲染步骤
			[render-attachment "p-name"]                   # 步骤名称，用来下方引用
				"type" @string => ""                   # (必选) 类型，可选取值见 type
				"color" @index                         # (可选) 设置颜色附件
					"color" "a-name" @string => "" # (可选) 引用附件，可选取值见 layout
					# ...
			# ...

# 添加着色器
["shader" shader]
	[shader "name" shader-define]
		# shader: 着色器 SPIR-V 编译码
		"shader" @"vertex"    => &"shader.vert.spv" # (必选, 且唯一) 顶点着色器
		"shader" @"tess-ctrl" => &"shader.tesc.spv" # (必选, 且唯一) 曲面细分控制着色器
		"shader" @"tess-eval" => &"shader.tese.spv" # (必选, 且唯一) 曲面细分计算着色器
		"shader" @"geometry"  => &"shader.geom.spv" # (必选, 且唯一) 几何着色器
		"shader" @"fragment"  => &"shader.frag.spv" # (必选, 且唯一) 片段着色器
		"shader" @"compute"   => &"shader.comp.spv" # (必选, 且唯一) 计算着色器
		# input: 着色器输入
		# output: 着色器输出
		# 上一管线的着色器输出必须和下一管线的着色器输入一致，特别的，顶点着色器的输入必须和模型的顶点数据布局一致
		"input" @string => "layout-name"  # (可选) 映射使用 [layout] 所定义的数据布局
		"output" @string => "layout-name" # (可选) 映射使用 [layout] 所定义的数据布局
		# uniform: 统一变量
		[shader-define "uniform" uniform-define] # (可选)
			# [uniform-define] 节点下的名称必须是正整数字符串
			# 且该数字必须升序排列且不重复
			# 该数字指示该 uniform 在该 shader 中所占用的 binding
			[uniform-define "0"] # (可选)
				"layout" @string => "layout-name" # (必选) 映射使用 [layout] 所定义的数据布局
				"share-model" @null               # (可选) 是否在 该呈现 该管线 中使所有的 模型 共用，存在该项为是，默认否
				"share-pipe" @null                # (可选) 是否在 该呈现 中使所有的 管线 共用，存在该项为是，默认否
				"share-present" @null             # (可选) 是否使所有的 呈现 共用，存在该项为是，默认否
			# 使用采样器及其他状况的情形待定
			# ...

# 构建图形管线
["g-pipe" g-pipe]
	[g-pipe "name" g-pipe-define]
		[g-pipe-define "shader" g-pipe-shader]
			# 着色器必须按照实际渲染流程的类型顺序排列
			# 即: vertex [tess-ctrl tess-eval] [geometry] fragment
			"shader-name" @string => "symbol" # symbol 为该着色器使用的入口符号
			# ...
	[g-pipe-define]
		# 设置模型顶点绘制拓扑结构
		"topology" @string => ""
		# pl:  point list
		# ll:  line list
		# ls:  line strip
		# tl:  triangle list
		# ts:  triangle strip
		# tf:  triangle fan
		# lla: line list with adjacency
		# lsa: line strip with adjacency
		# tla: triangle list with adjacency
		# tsa: triangle strip with adjacency
	[g-pipe-define]
		# 设置色彩混合
		"blend" @string => "blend-name"
		"render" @string => "render-name"
		"render.pass" @string => "render.p-name"
		[g-pipe-define "dynamic" g-pipe-dynamic]
			# (可选) 设置动态属性
			# 下发属性均可选，存在则启用
			"line_width" @null           # 线宽
			"depth_bias" @null           #
			"blend_constants" @null      # 混合常量 (blend.color)
			"depth_bounds" @null         #
			"stencil_compare_mask" @null #
			"stencil_write_mask" @null   #
			"stencil_reference" @null    #
